name: yamdb_final workflow

on: [push]

jobs:



  deploy:
   runs-on: ubuntu-latest

   steps:

   - name: Is docker install
     uses: appleboy/ssh-action@master
     with:
       host: ${{ secrets.CLOUD_HOST }}
       username: ${{ secrets.CLOUD_USER }}
       key: ${{ secrets.SSH_KEY }}
       passphrase: ${{ secrets.PASSPHRASE }}
       script: |
         if sudo service docker status  > /dev/null 2>&1
         then
             sudo apt-get update && sudo apt-get upgrade docker-ce -y
         else
             curl -fsSL https://get.docker.com -o get-docker.sh > /dev/null 2>&1
             sh get-docker.sh
         fi


   - name: Compose up
     uses: appleboy/ssh-action@master
     with:
       host: ${{ secrets.CLOUD_HOST }}
       username: ${{ secrets.CLOUD_USER }}
       key: ${{ secrets.SSH_KEY }}
       passphrase: ${{ secrets.PASSPHRASE }}
       script: |

         sudo docker pull vamotest/yamdb_final
         id=$(sudo docker create docker pull vamotest/yamdb_final)

         FILE=docker-compose.yaml
         if [ -f "$FILE" ]
         then
             echo "$FILE exists and will removed"
             rm $FILE
         else
             echo "$FILE does not exist"
         fi

         echo "Add new $FILE"
         sudo docker cp $id:/usr/src/web/$FILE $FILE

         sudo docker rm -v $id

         sudo docker stop $(sudo docker ps -a -q) > /dev/null 2>&1
         sudo docker kill $(sudo docker ps -a -q) > /dev/null 2>&1
         
         docker cp $id:/usr/src/web/.env.template .env
         
         export SECRET_KEY=${{ secrets.SECRET_KEY }}
         export DEBUG=${{ secrets.DEBUG }}
         export DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}
         export DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}
         export DB_ENGINE=${{ secrets.DB_ENGINE }}
         export DB_NAME=${{ secrets.DB_NAME }}
         export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
         export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
         export DB_HOST=${{ secrets.DB_HOST }}
         export DB_PORT=${{ secrets.DB_PORT }}
         
         
         cat << EOF > add_secrets.py
         
         #!/usr/bin/python3
         import os
         with open('.env', 'r') as f:
             content = f.readlines()
         with open('.env', 'w') as f:
             for env_var in [env_var.strip() for env_var in content]:
                 f.write(f'{env_var}={os.environ.get(env_var)}\n')
         EOF
         sudo chmod 755 add_secrets.py
         ./add_secrets.py 
        
         docker-compose up -d  --force-recreate


   - name: Clean up
     uses: appleboy/ssh-action@master
     with:
       host: ${{ secrets.CLOUD_HOST }}
       username: ${{ secrets.CLOUD_USER }}
       key: ${{ secrets.SSH_KEY }}
       passphrase: ${{ secrets.PASSPHRASE }}
       script: |
         sudo docker system prune -f > /dev/null 2>&1
         sudo docker volume prune -f > /dev/null 2>&1


   - name: Prepare django
     uses: appleboy/ssh-action@master
     with:
       host: ${{ secrets.CLOUD_HOST }}
       username: ${{ secrets.CLOUD_USER }}
       key: ${{ secrets.SSH_KEY }}
       passphrase: ${{ secrets.PASSPHRASE }}
       script: |
         docker-compose exec -T web python3 manage.py collectstatic --noinput
         docker-compose exec -T web python3 manage.py migrate --noinput
         docker-compose exec -T web python3 manage.py loaddata /usr/src/web/fixture.json


  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!
        
        
